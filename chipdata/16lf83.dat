'GCBASIC/GCGB Chip Data File
'Chip: 16LF83
'Main Format last revised:   14/07/2017
'Header Format last revised: 22/05/2021

[ChipData]
';All items in the ChipData section are available to user programs as constants
';The constants have the prefix of Chip: See the examples below

'This constant is exposed as ChipWORDS
Prog=512

'This constant is exposed as ChipEEPROM
EEPROM=0

'This constant is exposed as ChipRAM
RAM=36

'This constant is exposed as ChipIO
I/O=13

'This constant is exposed as ChipADC
ADC=0

'This constant is exposed as ChipMhz
MaxMHz=10

'This constant is exposed with only the first parameter (if more than one)
IntOsc=0

'This constant is exposed as ChipPins
Pins=18

'This constant is exposed as ChipFamily
Family=14

'This constant is exposed as ChipSubFamily
SubFamily=14000

'This constant is exposed as ChipConfWords
ConfigWords=1

'This constant is exposed as ChipPSP
PSP=0

'This constant is exposed as ChipUSART
USART=0

'This constant is exposed as ChipMaxAddress
MaxAddress=175

';Microcontroller specific configuration Constants used in specific libraries, compiler or user programs
';This section of constants is specific to a microcontroller, so the constants may not be present for all microcontrollers

'ChipStacks constant can be used in user programs and provides the available stack depth
Stacks=8

'ChipUserIDAddress constant is used in user programs and provides the User ID address
UserIDAddress=8192

'ChipUserIDLength constant is used in user programs to provide the length of the UserID (in words)
UserIDLength=4

'ChipSelfWrite constant is used within the compiler to indicate the chip is self write capable
SelfWrite=0

[Interrupts]
'For specific details of the interrupts see the microcontroller datasheet
'The first parameter is the Great Cow BASIC identifier used in user code to expose the specific interrupt
EEPROMReady:EEIE,EEIF
ExtInt0:INTE,INTF
PORTBChange:RBIE,RBIF
PortChange:RBIE,RBIF
Timer0Overflow:T0IE,T0IF

[Registers]
'For specific details of the registers see the microcontroller datasheet
'The first parameter is the Great Cow BASIC register name used in user code to expose the specific register
INDF,0
TMR0,1
PCL,2
STATUS,3
FSR,4
PORTA,5
PORTB,6
EEDATA,8
EEADR,9
PCLATH,10
INTCON,11
OPTION_REG,129
TRISA,133
TRISB,134
EECON1,136
EECON2,137

[Bits]
'For details of the bits (relative to a register in terms of registerbits) see the microcontroller datasheet
'The first parameter is the Great Cow BASIC bit name used in user code to expose the specific registerbit
C,STATUS,0
DC,STATUS,1
Z,STATUS,2
NOT_PD,STATUS,3
NOT_TO,STATUS,4
IRP,STATUS,7
RP0,STATUS,5
RP1,STATUS,6
RA0,PORTA,0
RA1,PORTA,1
RA2,PORTA,2
RA3,PORTA,3
RA4,PORTA,4
RB0,PORTB,0
RB1,PORTB,1
RB2,PORTB,2
RB3,PORTB,3
RB4,PORTB,4
RB5,PORTB,5
RB6,PORTB,6
RB7,PORTB,7
RBIF,INTCON,0
INTF,INTCON,1
T0IF,INTCON,2
RBIE,INTCON,3
INTE,INTCON,4
T0IE,INTCON,5
EEIE,INTCON,6
GIE,INTCON,7
TMR0IF,INTCON,2
TMR0IE,INTCON,5
PSA,OPTION_REG,3
T0SE,OPTION_REG,4
T0CS,OPTION_REG,5
INTEDG,OPTION_REG,6
NOT_RBPU,OPTION_REG,7
PS0,OPTION_REG,0
PS1,OPTION_REG,1
PS2,OPTION_REG,2
TRISA0,TRISA,0
TRISA1,TRISA,1
TRISA2,TRISA,2
TRISA3,TRISA,3
TRISA4,TRISA,4
TRISB0,TRISB,0
TRISB1,TRISB,1
TRISB2,TRISB,2
TRISB3,TRISB,3
TRISB4,TRISB,4
TRISB5,TRISB,5
TRISB6,TRISB,6
TRISB7,TRISB,7
RD,EECON1,0
WR,EECON1,1
WREN,EECON1,2
WRERR,EECON1,3
EEIF,EECON1,4

[FreeRAM]
0C:2F

[NoBankRAM]
'NoBankRAM is somewhat misnamed - it is used for the defintion of (any) access bank locations
'If a memory location is defined in both NoBankRAM and FreeRAM, then the compiler knows that it is access bank RAM.
'If an SFR location is in one of the NoBankRAM ranges, then the compiler knows not to do any bank selection when accessing that register.

'The NoBankRAM section must include two ranges, one for access bank RAM, one for access bank SFRs, or there will be issues.
'The first range MUST be the ACCESS RAM range
'The first range is the FAST SFR range

'If there are no ranges defined in NoBankRAM, the compiler will try to guess them.
'On 18Fs, it will guess based on where the lowest SFR is, and from what the total RAM on the chip is. If there's only one range defined
'in the NoBankRAM locations, the compiler will assume that is the range for the RAM, and then will guess where the range for the access bank SFRs is.
0C:2F

[Pins-DIP]
17,RA0(IO)
18,RA1(IO)
1,RA2(IO)
2,RA3(IO)
3,RA4(IO)
6,RB0(IO)
7,RB1(IO)
8,RB2(IO)
9,RB3(IO)
10,RB4(IO)
11,RB5(IO)
12,RB6(IO)
13,RB7(IO)
4,MCLR
16,OSC1
15,OSC2
5,Vss
14,Vdd

[ConfigOps]
'For details of the config options see the microcontroller datasheet
'The first parameter is the configuration field that can be used to expose specific configuration bits
'The other parameters are the configuration field options that can be set
OSC=LP,XT,HS,EXTRC,RC
WDTE=OFF,ON
PWRTE=ON,OFF
CP=ON,OFF

[Config]
'For details of the config addresses see the microcontroller datasheet
FOSC_LP,1,16380
LP_OSC,1,16380
FOSC_XT,1,16381
XT_OSC,1,16381
FOSC_HS,1,16382
HS_OSC,1,16382
FOSC_EXTRC,1,16383
RC_OSC,1,16383
WDTE_OFF,1,16379
WDTE_ON,1,16383
PWRTE_ON,1,16375
PWRTE_OFF,1,16383
CP_ON,1,15
CP_OFF,1,16383
IDLOC0,1,8192
IDLOC1,1,8193
IDLOC2,1,8194
IDLOC3,1,8195

